// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: posts.sql

package db_generated

import (
	"context"
	"time"
)

const createPost = `-- name: CreatePost :one
insert into posts (id, created_at, title, body, author)
values (?, ?, ?, ?, ? )
returning id, created_at, updated_at, title, body, author
`

type CreatePostParams struct {
	ID        interface{}
	CreatedAt time.Time
	Title     string
	Body      string
	Author    interface{}
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost,
		arg.ID,
		arg.CreatedAt,
		arg.Title,
		arg.Body,
		arg.Author,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Body,
		&i.Author,
	)
	return i, err
}

const deletePost = `-- name: DeletePost :exec
DELETE FROM posts 
WHERE id = ?
`

func (q *Queries) DeletePost(ctx context.Context, id interface{}) error {
	_, err := q.db.ExecContext(ctx, deletePost, id)
	return err
}

const getPostById = `-- name: GetPostById :one
SELECT id, created_at, updated_at, title, body, author
FROM posts 
WHERE id = ?
`

func (q *Queries) GetPostById(ctx context.Context, id interface{}) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPostById, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Body,
		&i.Author,
	)
	return i, err
}

const getPostsPage = `-- name: GetPostsPage :many
SELECT id, created_at, updated_at, title, body, author
FROM posts 
ORDER BY created_at DESC
  LIMIT ?2 OFFSET ?1
`

type GetPostsPageParams struct {
	PagingOffset int64
	PageSize     int64
}

func (q *Queries) GetPostsPage(ctx context.Context, arg GetPostsPageParams) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getPostsPage, arg.PagingOffset, arg.PageSize)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Body,
			&i.Author,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
