package views

templ Register() {
	<div class="min-h-screen flex items-center justify-center bg-background px-4 sm:px-6 lg:px-8">
		<div class="max-w-md w-full space-y-8">
			<div>
				<h2 class="mt-6 text-center text-3xl font-extrabold text-on-surface-strong">
					Create your account
				</h2>
				<p class="mt-2 text-center text-sm text-on-surface">
					Or
					<a href="/login" class="font-medium text-primary hover:text-primary-variant ml-1">
						sign in to existing account
					</a>
				</p>
			</div>
			<form id="register-form" class="mt-8 space-y-6">
				<div id="register-message" class="hidden"></div>
				<div class="rounded-md shadow-sm -space-y-px">
					<div>
						<label for="email" class="sr-only">Email address</label>
						<input 
							id="email" 
							name="email" 
							type="email" 
							autocomplete="email" 
							required 
							class="appearance-none rounded-none relative block w-full px-3 py-2 border border-outline placeholder-on-surface text-on-surface rounded-t-md focus:outline-none focus:ring-primary focus:border-primary focus:z-10 sm:text-sm bg-surface" 
							placeholder="Email address"
						/>
					</div>
					<div>
						<label for="password" class="sr-only">Password</label>
						<input 
							id="password" 
							name="password" 
							type="password" 
							autocomplete="new-password" 
							required 
							minlength="6"
							class="appearance-none rounded-none relative block w-full px-3 py-2 border border-outline placeholder-on-surface text-on-surface focus:outline-none focus:ring-primary focus:border-primary focus:z-10 sm:text-sm bg-surface" 
							placeholder="Password (min 6 characters)"
						/>
					</div>
					<div>
						<label for="password-confirm" class="sr-only">Confirm Password</label>
						<input 
							id="password-confirm" 
							name="password-confirm" 
							type="password" 
							autocomplete="new-password" 
							required 
							minlength="6"
							class="appearance-none rounded-none relative block w-full px-3 py-2 border border-outline placeholder-on-surface text-on-surface rounded-b-md focus:outline-none focus:ring-primary focus:border-primary focus:z-10 sm:text-sm bg-surface" 
							placeholder="Confirm password"
						/>
					</div>
				</div>

				<div>
					<button 
						type="submit" 
						id="register-button"
						class="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-primary hover:bg-primary-variant focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary disabled:opacity-50 disabled:cursor-not-allowed"
					>
						<span id="register-text">Create account</span>
						<span id="register-loading" class="hidden">Creating account...</span>
					</button>
				</div>
			</form>
		</div>
	</div>

	<script>
		document.getElementById('register-form').addEventListener('submit', async function(e) {
			e.preventDefault();
			
			const button = document.getElementById('register-button');
			const buttonText = document.getElementById('register-text');
			const buttonLoading = document.getElementById('register-loading');
			const messageEl = document.getElementById('register-message');
			
			const formData = new FormData(e.target);
			const password = formData.get('password');
			const passwordConfirm = formData.get('password-confirm');
			
			// Client-side validation
			if (password !== passwordConfirm) {
				messageEl.textContent = 'Passwords do not match';
				messageEl.className = 'text-red-600 text-sm text-center p-2 bg-red-50 rounded border border-red-200';
				messageEl.classList.remove('hidden');
				return;
			}
			
			if (password.length < 6) {
				messageEl.textContent = 'Password must be at least 6 characters';
				messageEl.className = 'text-red-600 text-sm text-center p-2 bg-red-50 rounded border border-red-200';
				messageEl.classList.remove('hidden');
				return;
			}
			
			// Show loading state
			button.disabled = true;
			buttonText.classList.add('hidden');
			buttonLoading.classList.remove('hidden');
			messageEl.classList.add('hidden');
			
			const data = {
				email: formData.get('email'),
				password: password
			};
			
			try {
				const response = await fetch('/auth/register', {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json',
					},
					body: JSON.stringify(data),
				});
				
				const result = await response.json();
				
				if (result.success) {
					// Show success message and redirect
					messageEl.textContent = 'Account created successfully! Redirecting...';
					messageEl.className = 'text-green-600 text-sm text-center p-2 bg-green-50 rounded border border-green-200';
					messageEl.classList.remove('hidden');
					
					setTimeout(() => {
						window.location.href = '/';
					}, 1500);
				} else {
					// Show error message
					messageEl.textContent = result.message || 'Registration failed';
					messageEl.className = 'text-red-600 text-sm text-center p-2 bg-red-50 rounded border border-red-200';
					messageEl.classList.remove('hidden');
				}
			} catch (error) {
				messageEl.textContent = 'Network error. Please try again.';
				messageEl.className = 'text-red-600 text-sm text-center p-2 bg-red-50 rounded border border-red-200';
				messageEl.classList.remove('hidden');
			} finally {
				// Reset loading state
				button.disabled = false;
				buttonText.classList.remove('hidden');
				buttonLoading.classList.add('hidden');
			}
		});
	</script>
}
